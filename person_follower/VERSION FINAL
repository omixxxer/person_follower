import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import math
import time

class PersonFollower(Node):

    def __init__(self):
        super().__init__('person_follower')
        self.publisher_ = self.create_publisher(Twist, '/cmd_vel', 10)
        self.subscription = self.create_subscription(
            LaserScan,
            '/scan',
            self.listener_callback,
            10)
        self.subscription

        self.prev_angles = []  # Store previous angles for angle smoothing
        self.last_angle = None  # Store the last angle of the robot
        self.last_angle_time = None  # Store the time when the last angle was recorded
        self.min_distance = 0.4  # Set a minimum distance to avoid collisions
        self.angle_filter_window = 5  # Window size for angle smoothing

        self.person_detected = False  # Flag to indicate if a person is currently detected
        self.object_detected = False  # Flag to indicate if an object is currently detected
        self.rotation_triggered = False  # Flag to indicate if the rotation is triggered
        self.rotation_completed = False  # Flag to indicate if the 180-degree rotation is completed
        self.still_start_time = None  # Store the start time when the robot becomes still
        self.still_timeout = 10  # Timeout duration in seconds for the robot to remain still before rotation
        self.angle_tracking_timeout = 20  # Timeout duration in seconds for angle tracking before rotation
        self.angle_mode = "360"  # Angle mode: "360" or "0"

        print("Iniciando")

    def detect_person(self, ranges):
        person_threshold = 1.5  # Threshold for person detection
        obstacle_threshold = 0.25  # Threshold for obstacle detection

        if self.angle_mode == "360":
            min_range = min(ranges)
        else:
            min_range = ranges[len(ranges) // 2]  # Only consider the front angle (middle index)

        if min_range < obstacle_threshold:
            return False  # If there's an obstacle too close, don't consider it as a person

        if min_range < person_threshold:
            return True  # If the range is below the person threshold, consider it as a person

        return False

    def smooth_angle(self, angle):
        angles_rad = [math.radians(a) for a in self.prev_angles]
        angle_rad = math.radians(angle)

        angles_rad.append(angle_rad)

        if len(angles_rad) > self.angle_filter_window:
            angles_rad.pop(0)

        avg_angle_rad = sum(math.atan2(math.sin(a), math.cos(a)) for a in angles_rad) / len(angles_rad)
        avg_angle_deg = math.degrees(avg_angle_rad)

        return avg_angle_deg

    def listener_callback(self, input_msg):
        angle_min = input_msg.angle_min
        angle_max = input_msg.angle_max
        angle_increment = input_msg.angle_increment
        ranges = input_msg.ranges
        
        vx = 0.0  # Initialize linear velocity
        wz = 0.0  # Initialize angular velocity
        
        angle_to_person = 0  # Set a default value

        if self.detect_person(ranges):
            self.person_detected = True
            self.object_detected = False
        else:
            self.person_detected = False

        if not self.person_detected and not self.object_detected:
            self.object_detected = True

        if self.person_detected:
            if self.angle_mode == "360":
                min_range_index = ranges.index(min(ranges))
                angle_to_person = angle_min + min_range_index * angle_increment
            else:
                min_range_index = ranges[180] # Middle index for front angle
                angle_to_person = 0  # Front angle

            if self.prev_angles:
                angle_to_person = self.smooth_angle(angle_to_person - angle_min)

            if min(ranges) < self.min_distance:
                vx = 0.05  # Reduced velocity
            else:
                vx = 0.35  # Normal velocity

            target_angle = angle_to_person
            angle_difference = -target_angle  # Negative to change the orientation to move

            max_angular_velocity = 0.6
            if abs(angle_difference) > max_angular_velocity:
                angle_difference = max_angular_velocity if angle_difference > 0 else -max_angular_velocity

            wz = 2.0 * angle_difference

            output_msg = Twist()
            output_msg.linear.x = vx
            output_msg.angular.z = wz
            self.publisher_.publish(output_msg)

            self.rotation_triggered = False
            self.rotation_completed = False
            self.still_start_time = None  # Reset the time for stillness tracking
            
        else:
            if not self.rotation_triggered:
                if self.still_start_time is not None:
                    current_time = time.time()
                    elapsed_time = current_time - self.still_start_time
                    if elapsed_time > self.angle_tracking_timeout and vx == 0 and wz == 0:
                        self.rotation_triggered = True
                else:
                    if vx == 0 and wz == 0:
                        self.still_start_time = time.time()
            
            if self.rotation_triggered and not self.rotation_completed:
                self.rotate_180_degrees()

    def rotate_180_degrees(self):
        output_msg = Twist()
        output_msg.angular.z = math.pi * 2  # Rotate at 2*pi rad/s (360 degrees/s)
        self.publisher_.publish(output_msg)
        time.sleep(2)  # Always wait for 2 seconds after each rotation
        output_msg.angular.z = 0.0  # Stop rotation
        self.publisher_.publish(output_msg)
        self.rotation_completed = True  # Set rotation completed flag

def main(args=None):
    rclpy.init(args=args)

    person_follower = PersonFollower()

    rclpy.spin(person_follower)

    person_follower.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
